// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: captcha.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CheckCaptchaRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         string                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	RemoteIp      string                 `protobuf:"bytes,2,opt,name=remote_ip,json=remoteIp,proto3" json:"remote_ip,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckCaptchaRequest) Reset() {
	*x = CheckCaptchaRequest{}
	mi := &file_captcha_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckCaptchaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCaptchaRequest) ProtoMessage() {}

func (x *CheckCaptchaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_captcha_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCaptchaRequest.ProtoReflect.Descriptor instead.
func (*CheckCaptchaRequest) Descriptor() ([]byte, []int) {
	return file_captcha_proto_rawDescGZIP(), []int{0}
}

func (x *CheckCaptchaRequest) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *CheckCaptchaRequest) GetRemoteIp() string {
	if x != nil {
		return x.RemoteIp
	}
	return ""
}

type CheckCaptchaResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	IsValid       bool                   `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CheckCaptchaResponse) Reset() {
	*x = CheckCaptchaResponse{}
	mi := &file_captcha_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CheckCaptchaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckCaptchaResponse) ProtoMessage() {}

func (x *CheckCaptchaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_captcha_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckCaptchaResponse.ProtoReflect.Descriptor instead.
func (*CheckCaptchaResponse) Descriptor() ([]byte, []int) {
	return file_captcha_proto_rawDescGZIP(), []int{1}
}

func (x *CheckCaptchaResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

var File_captcha_proto protoreflect.FileDescriptor

const file_captcha_proto_rawDesc = "" +
	"\n" +
	"\rcaptcha.proto\x12\x05proto\"H\n" +
	"\x13CheckCaptchaRequest\x12\x14\n" +
	"\x05token\x18\x01 \x01(\tR\x05token\x12\x1b\n" +
	"\tremote_ip\x18\x02 \x01(\tR\bremoteIp\"1\n" +
	"\x14CheckCaptchaResponse\x12\x19\n" +
	"\bis_valid\x18\x01 \x01(\bR\aisValid2[\n" +
	"\x0eCaptchaService\x12I\n" +
	"\fCheckCaptcha\x12\x1a.proto.CheckCaptchaRequest\x1a\x1b.proto.CheckCaptchaResponse\"\x00B\tZ\a.;protob\x06proto3"

var (
	file_captcha_proto_rawDescOnce sync.Once
	file_captcha_proto_rawDescData []byte
)

func file_captcha_proto_rawDescGZIP() []byte {
	file_captcha_proto_rawDescOnce.Do(func() {
		file_captcha_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_captcha_proto_rawDesc), len(file_captcha_proto_rawDesc)))
	})
	return file_captcha_proto_rawDescData
}

var file_captcha_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_captcha_proto_goTypes = []any{
	(*CheckCaptchaRequest)(nil),  // 0: proto.CheckCaptchaRequest
	(*CheckCaptchaResponse)(nil), // 1: proto.CheckCaptchaResponse
}
var file_captcha_proto_depIdxs = []int32{
	0, // 0: proto.CaptchaService.CheckCaptcha:input_type -> proto.CheckCaptchaRequest
	1, // 1: proto.CaptchaService.CheckCaptcha:output_type -> proto.CheckCaptchaResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_captcha_proto_init() }
func file_captcha_proto_init() {
	if File_captcha_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_captcha_proto_rawDesc), len(file_captcha_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_captcha_proto_goTypes,
		DependencyIndexes: file_captcha_proto_depIdxs,
		MessageInfos:      file_captcha_proto_msgTypes,
	}.Build()
	File_captcha_proto = out.File
	file_captcha_proto_goTypes = nil
	file_captcha_proto_depIdxs = nil
}
