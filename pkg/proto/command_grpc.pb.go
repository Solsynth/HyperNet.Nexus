// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: command.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CommandController_AddCommand_FullMethodName        = "/proto.CommandController/AddCommand"
	CommandController_RemoveCommand_FullMethodName     = "/proto.CommandController/RemoveCommand"
	CommandController_SendCommand_FullMethodName       = "/proto.CommandController/SendCommand"
	CommandController_SendStreamCommand_FullMethodName = "/proto.CommandController/SendStreamCommand"
)

// CommandControllerClient is the client API for CommandController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommandControllerClient interface {
	AddCommand(ctx context.Context, in *CommandInfo, opts ...grpc.CallOption) (*AddCommandResponse, error)
	RemoveCommand(ctx context.Context, in *CommandLookupRequest, opts ...grpc.CallOption) (*RemoveCommandResponse, error)
	SendCommand(ctx context.Context, in *CommandArgument, opts ...grpc.CallOption) (*CommandReturn, error)
	SendStreamCommand(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CommandArgument, CommandReturn], error)
}

type commandControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewCommandControllerClient(cc grpc.ClientConnInterface) CommandControllerClient {
	return &commandControllerClient{cc}
}

func (c *commandControllerClient) AddCommand(ctx context.Context, in *CommandInfo, opts ...grpc.CallOption) (*AddCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddCommandResponse)
	err := c.cc.Invoke(ctx, CommandController_AddCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandControllerClient) RemoveCommand(ctx context.Context, in *CommandLookupRequest, opts ...grpc.CallOption) (*RemoveCommandResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RemoveCommandResponse)
	err := c.cc.Invoke(ctx, CommandController_RemoveCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandControllerClient) SendCommand(ctx context.Context, in *CommandArgument, opts ...grpc.CallOption) (*CommandReturn, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommandReturn)
	err := c.cc.Invoke(ctx, CommandController_SendCommand_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commandControllerClient) SendStreamCommand(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[CommandArgument, CommandReturn], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CommandController_ServiceDesc.Streams[0], CommandController_SendStreamCommand_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[CommandArgument, CommandReturn]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CommandController_SendStreamCommandClient = grpc.BidiStreamingClient[CommandArgument, CommandReturn]

// CommandControllerServer is the server API for CommandController service.
// All implementations must embed UnimplementedCommandControllerServer
// for forward compatibility.
type CommandControllerServer interface {
	AddCommand(context.Context, *CommandInfo) (*AddCommandResponse, error)
	RemoveCommand(context.Context, *CommandLookupRequest) (*RemoveCommandResponse, error)
	SendCommand(context.Context, *CommandArgument) (*CommandReturn, error)
	SendStreamCommand(grpc.BidiStreamingServer[CommandArgument, CommandReturn]) error
	mustEmbedUnimplementedCommandControllerServer()
}

// UnimplementedCommandControllerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCommandControllerServer struct{}

func (UnimplementedCommandControllerServer) AddCommand(context.Context, *CommandInfo) (*AddCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCommand not implemented")
}
func (UnimplementedCommandControllerServer) RemoveCommand(context.Context, *CommandLookupRequest) (*RemoveCommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCommand not implemented")
}
func (UnimplementedCommandControllerServer) SendCommand(context.Context, *CommandArgument) (*CommandReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCommand not implemented")
}
func (UnimplementedCommandControllerServer) SendStreamCommand(grpc.BidiStreamingServer[CommandArgument, CommandReturn]) error {
	return status.Errorf(codes.Unimplemented, "method SendStreamCommand not implemented")
}
func (UnimplementedCommandControllerServer) mustEmbedUnimplementedCommandControllerServer() {}
func (UnimplementedCommandControllerServer) testEmbeddedByValue()                           {}

// UnsafeCommandControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommandControllerServer will
// result in compilation errors.
type UnsafeCommandControllerServer interface {
	mustEmbedUnimplementedCommandControllerServer()
}

func RegisterCommandControllerServer(s grpc.ServiceRegistrar, srv CommandControllerServer) {
	// If the following call pancis, it indicates UnimplementedCommandControllerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CommandController_ServiceDesc, srv)
}

func _CommandController_AddCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandControllerServer).AddCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandController_AddCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandControllerServer).AddCommand(ctx, req.(*CommandInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandController_RemoveCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandLookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandControllerServer).RemoveCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandController_RemoveCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandControllerServer).RemoveCommand(ctx, req.(*CommandLookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandController_SendCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandArgument)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandControllerServer).SendCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CommandController_SendCommand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandControllerServer).SendCommand(ctx, req.(*CommandArgument))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommandController_SendStreamCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CommandControllerServer).SendStreamCommand(&grpc.GenericServerStream[CommandArgument, CommandReturn]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CommandController_SendStreamCommandServer = grpc.BidiStreamingServer[CommandArgument, CommandReturn]

// CommandController_ServiceDesc is the grpc.ServiceDesc for CommandController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommandController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CommandController",
	HandlerType: (*CommandControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddCommand",
			Handler:    _CommandController_AddCommand_Handler,
		},
		{
			MethodName: "RemoveCommand",
			Handler:    _CommandController_RemoveCommand_Handler,
		},
		{
			MethodName: "SendCommand",
			Handler:    _CommandController_SendCommand_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendStreamCommand",
			Handler:       _CommandController_SendStreamCommand_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "command.proto",
}
